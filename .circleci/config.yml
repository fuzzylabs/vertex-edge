version: 2.1

orbs:
  python: circleci/python@1.4.0
  gcp-cli: circleci/gcp-cli@2.2.0

commands:
  dvc_google_auth:
    description: Configure the DVC to use Google Cloud service account
    steps:
      - run: |
          echo $GCLOUD_SERVICE_KEY > ${HOME}/gcloud-service-key.json
          dvc remote modify --local storage credentialpath ${HOME}/gcloud-service-key.json

  google_auth:
    steps:
      - run: |
          echo $GCLOUD_SERVICE_KEY > ${HOME}/gcloud-service-key.json
          gcloud auth activate-service-account --key-file=${HOME}/gcloud-service-key.json
  pin_pip_version:
    steps:
      - run: |
          pip install pip==20.2.3
jobs:
  python-test:
    parameters:
      path:
        type: string
    executor:
      name: python/default
      tag: 3.8.0
    working_directory: ~/project/<< parameters.path >>
    steps:
      - checkout:
          path: ~/project
      - python/install-packages:
          pkg-manager: pip
      - run:
          name: Run tests
          command: |
            PYTHONPATH=. py.test
  run-dvc-pipeline:
    parameters:
      pipeline_name:
        type: string
    executor:
      name: python/default
      tag: 3.8.0
    working_directory: ~/project/models/<< parameters.pipeline_name >>
    steps:
      - checkout:
          path: ~/project
      - pin_pip_version
      - python/install-packages:
          pip-dependency-file: ~/project/requirements.txt
          pkg-manager: pip
      - dvc_google_auth
      - run:
          name: DVC pipeline run
          command: |
            pip install gcsfs==0.6.1 # Quick fix, https://github.com/dask/gcsfs/issues/393
            dvc pull || echo 1 # Force DVC pull to succeed, missing files will be recreated, during `dvc repro`
            GOOGLE_APPLICATION_CREDENTIALS=${HOME}/gcloud-service-key.json IMAGE_TAG=${CIRCLE_SHA1} dvc repro
      - run:
          name: Deploy model
          no_output_timeout: 30m
          command: |
            export GOOGLE_APPLICATION_CREDENTIALS=${HOME}/gcloud-service-key.json
            cd ../../ && python edge.py vertex deploy
  build-docker:
    executor:
      name: python/default
      tag: 3.8.0
    parameters:
      edge_command:
        type: string
    working_directory: ~/project/
    steps:
      - checkout:
          path: ~/project
      - pin_pip_version
      - python/install-packages:
          pkg-manager: pip
      - setup_remote_docker
      - gcp-cli/install
      - gcp-cli/initialize
      - google_auth
      - run:
          name: Call vertex:edge to build and push Docker image
          command: |
            gcloud auth configure-docker
            export GOOGLE_APPLICATION_CREDENTIALS=${HOME}/gcloud-service-key.json
            TAG=${CIRCLE_SHA1} python edge.py << parameters.edge_command >>
  cloud-run-deploy:
    executor:
      name: python/default
      tag: 3.8.0
    working_directory: ~/project/
    steps:
      - checkout:
          path: ~/project
      - pin_pip_version
      - python/install-packages:
          pkg-manager: pip
      - gcp-cli/install
      - gcp-cli/initialize
      - google_auth
      - run:
          name: Deploy Cloud Run
          command: |
            export GOOGLE_APPLICATION_CREDENTIALS=${HOME}/gcloud-service-key.json
            TAG=${CIRCLE_SHA1} python edge.py webapp deploy
workflows:
  version: 2
  reference-example:
    jobs:
      - python-test:
          name: model-pipeline-python-tests
          path: models/fashion
      - build-docker:
          name: prediction-server-build-docker
          edge_command: "vertex build-docker"
          requires:
            - model-pipeline-python-tests
          filters:
            branches:
              only:
                - master
      - run-dvc-pipeline:
          name: reference-example-dvc-pipeline
          pipeline_name: fashion
          requires:
            - prediction-server-build-docker
          filters:
            branches:
              only:
                - master

  webapp:
    jobs:
      - python-test:
          name: webapp-python-tests
          path: services/fashion-web/
      - build-docker:
          name: webapp-build-docker
          edge_command: "webapp build-docker"
          requires:
            - webapp-python-tests
          filters:
            branches:
              only:
                - master
      - cloud-run-deploy:
          name: webapp-cloud-run-deploy
          requires:
            - webapp-build-docker
          filters:
            branches:
              only:
                - master
